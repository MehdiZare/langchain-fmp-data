name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies with Dynamic Versioning
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with dev,test

      - name: Run style checks
        run: |
          poetry run black . --check --diff
          poetry run isort . --check --diff

#      - name: Run type checks
#        run: poetry run mypy .

      - name: Run security checks
        run: poetry run bandit -r langchain_fmp_data

      - name: Run tests with coverage
        run: poetry run pytest --cov=langchain_fmp_data --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          files: ./coverage.xml

  publish-test:
    name: Publish to TestPyPI
    needs: test
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Configure Poetry
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Clean build artifacts
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf *.egg-info/

      - name: Build package
        run: |
          poetry build
          echo "Built artifacts:"
          ls -la dist/

      - name: Publish to TestPyPI
        run: poetry publish -r testpypi --skip-existing

  publish-prod:
    name: Publish to PyPI
    needs: [ test, publish-test ]
    if: |
      success() &&
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, '-alpha') &&
      !contains(github.ref, '-beta')
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Configure Poetry
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Display version info
        run: |
          echo "Git ref: ${{ github.ref }}"
          poetry version
          git describe --tags

      - name: Clean build artifacts
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf *.egg-info/

      - name: Build package
        run: |
          poetry build
          echo "Built artifacts:"
          ls -la dist/

      - name: Publish to PyPI
        run: |
          echo "Publishing to PyPI..."
          poetry publish --skip-existing --verbose
          echo "Published successfully!"

  create-release:
    name: Create GitHub Release
    needs: [ publish-prod ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            - Dynamic versioning managed with `poetry-dynamic-versioning`
            - Published to PyPI and TestPyPI
            - CI/CD streamlined for `langchain-fmp-data`
